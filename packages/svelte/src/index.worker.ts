import { ExpirationPlugin } from "@serwist/expiration";
import type { PrecacheEntry } from "@serwist/precaching";
import { CacheFirst, NetworkFirst, StaleWhileRevalidate } from "@serwist/strategies";
import type { RuntimeCaching } from "@serwist/sw";

import { build as immutableAssets, files as staticAssets, prerendered as prerenderedRoutes, version as serviceWorkerVersion } from "$service-worker";

export { immutableAssets, staticAssets, prerenderedRoutes, serviceWorkerVersion };

export type StaticRevisions = string | { [url: string]: string | null };

export interface GetPrecacheManifestOptions {
  /**
   * Whether immutable assets, as in assets that are generated by
   * Vite, should be precached.
   *
   * @default true
   */
  precacheImmutable?: boolean;
  /**
   * Whether static assets should be precached.
   *
   * @default true
   */
  precacheStatic?: boolean;
  /**
   * Whether prerendered routes should be precached. This
   * includes their __data.json files.
   *
   * @default true
   */
  precachePrerendered?: boolean;
  /**
   * A string revision used for all static assets or an object that maps
   * URLs of static assets to custom `revision`'s.
   * If an URL doesn't exist in the object, `$service-worker.version`
   * will be used instead.
   *
   * This helps prevent such assets, which are unlikely to change, from
   * being invalidated every time the service worker is rebuilt and updated.
   *
   * Note: you should prefix these URLs with `$service-worker.base`.
   */
  staticRevisions?: StaticRevisions;
}

/**
 * Retrieves the precache manifest generated by SvelteKit. If further
 * modifications are needed, simply mutate the resulting array.
 *
 * @param options
 * @returns
 */
export const getPrecacheManifest = ({
  precacheImmutable = true,
  precacheStatic = true,
  precachePrerendered = true,
  staticRevisions,
}: GetPrecacheManifestOptions = {}): PrecacheEntry[] => {
  const staticMapper = (url: string): PrecacheEntry => ({
    url,
    revision:
      typeof staticRevisions === "string"
        ? staticRevisions
        : typeof staticRevisions === "object"
          ? url in staticRevisions
            ? staticRevisions[url]
            : serviceWorkerVersion
          : serviceWorkerVersion,
  });
  return [
    // Immutable files generated by Vite.
    ...(precacheImmutable ? immutableAssets.map((url) => ({ url, revision: null }) satisfies PrecacheEntry) : []),
    // Files in the static directory.
    ...(precacheStatic ? staticAssets.map(staticMapper) : []),
    // Prerendered routes.
    ...(precachePrerendered ? prerenderedRoutes.map((url) => ({ url, revision: serviceWorkerVersion }) satisfies PrecacheEntry) : []),
  ];
};

export const defaultIgnoreUrlParameters = [/^x-sveltekit-invalidated$/];

export const defaultCache: RuntimeCaching[] = [
  {
    matcher: /^https:\/\/fonts\.(?:googleapis|gstatic)\.com\/.*/i,
    handler: new CacheFirst({
      cacheName: "google-fonts",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 4,
          maxAgeSeconds: 365 * 24 * 60 * 60, // 365 days
        }),
      ],
    }),
  },
  {
    matcher: /\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,
    handler: new StaleWhileRevalidate({
      cacheName: "static-font-assets",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 4,
          maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
        }),
      ],
    }),
  },
  {
    matcher: /\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,
    handler: new StaleWhileRevalidate({
      cacheName: "static-image-assets",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 64,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
    }),
  },
  {
    matcher: /\.(?:js)$/i,
    handler: new StaleWhileRevalidate({
      cacheName: "static-js-assets",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 32,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
    }),
  },
  {
    matcher: /\.(?:css|less)$/i,
    handler: new StaleWhileRevalidate({
      cacheName: "static-style-assets",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 32,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
    }),
  },
  {
    matcher: /\.(?:json|xml|csv)$/i,
    handler: new NetworkFirst({
      cacheName: "static-data-assets",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 32,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
    }),
  },
  {
    matcher: /\/api\/.*$/i,
    method: "GET",
    handler: new NetworkFirst({
      cacheName: "apis",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 16,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
      networkTimeoutSeconds: 10, // fallback to cache if API does not response within 10 seconds
    }),
  },
  {
    matcher: /.*/i,
    handler: new NetworkFirst({
      cacheName: "others",
      plugins: [
        new ExpirationPlugin({
          maxEntries: 32,
          maxAgeSeconds: 24 * 60 * 60, // 24 hours
        }),
      ],
      networkTimeoutSeconds: 10,
    }),
  },
];
